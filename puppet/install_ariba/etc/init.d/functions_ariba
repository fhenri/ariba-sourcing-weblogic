# additional init functions for handling background daemons and waiting for startup

[[ "$-" = *x* ]] && { OPT_DEBUG=1; OPT_DEBUG_FUNC='*'; }                        # propagate -x to all functions

check_debug() {
        # [[ check_debug = $OPT_DEBUG_FUNC && -n "$OPT_DEBUG" ]] && set -x        # debug check_debug itself
        local caller=$(caller 0)
        local caller_func=${caller#* }; caller_func=${caller_func%% &}         
        local func="${1:-$caller_func}"
        
        [[ $func = $OPT_DEBUG_FUNC && -n "$OPT_DEBUG" ]] && echo "*** Entering function $func" 1>&2
        return $?
}

# A function to start a program.
daemon_bg() {
	# Test syntax.
	local gotbase= force= nicelevel corelimit logfile=/dev/null wait_arg wait_fn wait_time
	local pid base= user= nice= bg= pid_file=
	local cgroup=
	nicelevel=0
	while [ "$1" != "${1##[-+]}" ]; do
	  case $1 in
	    '')    echo $"$0: Usage: daemon [+/-nicelevel] {program}"
	           return 1 
                   ;;
	    --check)
		   base=$2
		   gotbase="yes"
		   shift 2
		   ;;
	    --check=?*)
	    	   base=${1#--check=}
		   gotbase="yes"
		   shift
		   ;;
	    --user)
		   user=$2
		   shift 2
		   ;;
	    --user=?*)
	           user=${1#--user=}
		   shift
		   ;;
	    --pidfile)
		   pid_file=$2
		   shift 2
		   ;;
	    --pidfile=?*)
		   pid_file=${1#--pidfile=}
		   shift
		   ;;
	    --force)
    	           force="force"
		   shift
		   ;;
	    --log)
    	           logfile=$2
	       	   shift 2
		   ;;
	    --log=?*)
            	   logfile=${1#--log=}
		   shift
		   ;;
	    --wait)
    	           wait_fn=${2%%:*}
    	           wait_time=${2#$wait_fn}; wait_time=${wait_time#:}
		   shift 2
		   ;;
	    --wait=?*)
    	           wait_arg=${1#--wait=}
    	           wait_fn=${wait_arg%%:*}
    	           wait_time=${wait_arg#$wait_fn}; wait_time=${wait_time#:}
		   shift
		   ;;
	    [-+][0-9]*)
	    	   nice="nice -n $1"
	           shift
		   ;;
	    *)     echo $"$0: Usage: daemon [+/-nicelevel] {program}"
	           return 1;;
	  esac
	done

    # Save basename.
    [ -z "$gotbase" ] && base=${1##*/}

    # See if it's already running. Look *only* at the pid file.
	__pids_var_run "$base" "$pid_file"

	[ -n "$pid" -a -z "$force" ] && return

	# make sure it doesn't core dump anywhere unless requested
	corelimit="ulimit -S -c ${DAEMON_COREFILE_LIMIT:-0}"
	
	# if they set NICELEVEL in /etc/sysconfig/foo, honor it
	[ -n "${NICELEVEL:-}" ] && nice="nice -n $NICELEVEL"
	
	# if they set CGROUP_DAEMON in /etc/sysconfig/foo, honor it
	if [ -n "${CGROUP_DAEMON}" ]; then
		if [ ! -x /bin/cgexec ]; then
			echo -n "Cgroups not installed"; warning
			echo
		else
			cgroup="/bin/cgexec";
			for i in $CGROUP_DAEMON; do
				cgroup="$cgroup -g $i";
			done
		fi
	fi

	# Echo daemon
        [ "${BOOTUP:-}" = "verbose" -a -z "${LSB:-}" ] && echo -n " $base"

	# And start it up.
	if [ -z "$user" ]; then
	   pid=$($cgroup $nice /bin/bash -c "$corelimit >/dev/null 2>&1 ; $* > $logfile 2>&1 & echo \$!")
	else
	   pid=$($cgroup $nice runuser -s /bin/bash $user -c "$corelimit >/dev/null 2>&1 ; $*  > $logfile 2>&1 & echo \$!")
	fi
        retval=$?
	[ -n "$wait_fn" ] && { wait_for $wait_fn $wait_time; retval=$?; }  
        [ -n "$pid_file" ] && pidofproc $base && echo $pid > $pid_file 
        $(exit $retval) && success $"$base startup" || failure $"$base startup"
}

wait_for() {
        local check_fn="$1" max_time="${2:-60}"
        local deadline=$(($SECONDS + $max_time))
        
        while [ $SECONDS -le $deadline ]; do
                sleep 5
                $check_fn > /dev/null && return 0
        done
        return 9        
}
